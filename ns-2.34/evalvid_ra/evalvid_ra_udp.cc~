/***********************************************************
evalvid_ra_udp.cc, author (modifier): A. Lie, NTNU Norway
This file contains classes for enabling the ns-2 udp sender to make
trace files storing:
time (packet tx), packet id, type (udp), size, quantiser scale used, frame type

The modification compared to smallko is thus the addition of quantiser scale,
and some cosmetic (naming).

************************************************************/
#include "evalvid_ra_udp.h"
#include "rtp.h"
#include "random.h"
#include "address.h"
#include "ip.h"


static class eraUdpAgentClass : public TclClass {
public:
	eraUdpAgentClass() : TclClass("Agent/eraUDP") {}
	TclObject* create(int, const char*const*) {
		return (new eraUdpAgent());
	}
} class_eraudp_agent;

eraUdpAgent::eraUdpAgent() : id_(0), openfile(0)
{
	bind("packetSize_", &size_);
	bind("TOS_field_", &tos_value_);
	UdpAgent::UdpAgent();
}

void eraUdpAgent::sendmsg(int nbytes, AppData* data, const char* flags)
{
	Packet *p;
	int n;
	char buf[100]; //added by smallko

	if (size_)
		n = nbytes / size_;
	else
		printf("Error: eraUDP size = 0\n");

	if (nbytes == -1) {
		printf("Error:  sendmsg() for UDP should not be -1\n");
		return;
	}	

	// If they are sending data, then it must fit within a single packet.
	if (data && nbytes > size_) {
		printf("Error: data greater than maximum eraUDP packet size\n");
		return;
	}
	//printf("Here in eraUdp, quant_=%d\n",quant_);
	double local_time = Scheduler::instance().clock();
	while (n-- > 0) {
		p = allocpkt();
		hdr_cmn::access(p)->size() = size_;
		//printf("Before write TOS=%d\n",hdr_ip::access(p)->prio());
		// NB: This overwrites the TOS marks set in timeout() function
		hdr_ip::access(p)->prio() = tos_value_; // HACK to test TOS field!!
		//printf("After write TOS=%d\n",hdr_ip::access(p)->prio());
		hdr_rtp* rh = hdr_rtp::access(p);
		rh->flags() = 0;
		rh->seqno() = ++seqno_;
		hdr_cmn::access(p)->timestamp() = 
		    (u_int32_t)(SAMPLERATE*local_time);
		hdr_cmn::access(p)->sendtime_ = local_time;	// (smallko)
		if(openfile!=0){
			hdr_cmn::access(p)->frame_pkt_id_ = id_++;
			sprintf(buf, "%-16f id %-16d udp %-16d %-8d %-8d\n", local_time, hdr_cmn::access(p)->frame_pkt_id_, hdr_cmn::access(p)->size()-28, quant_,frametype_);
			fwrite(buf, strlen(buf), 1, BWFile);  
			//printf("%-16f id %-16d udp %-16d\n", local_time, hdr_cmn::access(p)->frame_pkt_id_, hdr_cmn::access(p)->size()-28);
		}
		// add "beginning of talkspurt" labels (tcl/ex/test-rcvr.tcl)
		if (flags && (0 ==strcmp(flags, "NEW_BURST")))
			rh->flags() |= RTP_M;
		p->setdata(data);
		target_->recv(p);
	}
	n = nbytes % size_;
	if (n > 0) {
		p = allocpkt();
		hdr_cmn::access(p)->size() = n;
		hdr_ip::access(p)->prio() = tos_value_; // HACK to test TOS field!!
		hdr_rtp* rh = hdr_rtp::access(p);
		rh->flags() = 0;
		rh->seqno() = ++seqno_;
		hdr_cmn::access(p)->timestamp() = 
		    (u_int32_t)(SAMPLERATE*local_time);
		hdr_cmn::access(p)->sendtime_ = local_time;	// (smallko)
		if(openfile!=0){
			hdr_cmn::access(p)->frame_pkt_id_ = id_++;
			sprintf(buf, "%-16f id %-16d udp %-16d %-8d %-8d\n", local_time, hdr_cmn::access(p)->frame_pkt_id_, hdr_cmn::access(p)->size()-28, quant_, frametype_);
			fwrite(buf, strlen(buf), 1, BWFile); 
			//printf("%-16f id %-16d udp %-16d\n", local_time, hdr_cmn::access(p)->frame_pkt_id_, hdr_cmn::access(p)->size()-28);
		}
		// add "beginning of talkspurt" labels (tcl/ex/test-rcvr.tcl)
		if (flags && (0 == strcmp(flags, "NEW_BURST")))
			rh->flags() |= RTP_M;
		p->setdata(data);
		target_->recv(p);
	}
	idle();
}

int eraUdpAgent::command(int argc, const char*const* argv)
{
	if(argc ==2) {		//added by smallko
		if (strcmp(argv[1], "closefile") == 0) {
			if(openfile==1)
				fclose(BWFile);
			return (TCL_OK);
		}
	
	} 
	
	if (argc ==3) {  	//added by smallko
		if (strcmp(argv[1], "set_filename") == 0) {
			strcpy(BWfile, argv[2]);
			BWFile = fopen(BWfile, "w");
			/* Write to new sender trace file
			   the actual packets */
			openfile=1;
			return (TCL_OK);
		}
	}
	
	return (UdpAgent::command(argc, argv));
}
